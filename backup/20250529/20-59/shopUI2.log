const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const shopItems = require('./shopItems');
const { formatUserHeader } = require('./embedParts'); // optional

function buildShopEmbed(data, user) {
const embed = new EmbedBuilder()
    .setTitle('üõçÔ∏è Veres-Shop')
    .setDescription('Dr√ºcke auf einen Button unten, um ein Upgrade zu kaufen.')
    .setColor(0xff0044) // üî• Neonrot
    .setAuthor({
    name: `.${user.username}`,
    iconURL: user.displayAvatarURL({ dynamic: true })
    })
    // .setThumbnail(...) ‚Üê wird weggelassen
    .setFooter({ text: `.${user.username}` });

let description = '';

for (const [name, item] of Object.entries(shopItems)) {
    const level = data.upgradeLevels?.[name] ?? 0;
    const max = item.maxLevel;
    const price = level < max
    ? Math.floor(item.basePrice * Math.pow(item.scaling, level))
    : 'MAX';

  description += `> **${name}** (Lv. ${level}/${max})\n`;
    description += `> ${item.description}`;
if (item.role) description += ` | Rolle bei Max: ${item.role}`;
    description += ` | Preis: \`${price} Coins üí∞\`\n\n`;
}

embed.setDescription(description.trim());
return embed;
}

function buildInventoryEmbed(data, user) {
const upgrades = data.upgradeLevels ?? {};
const coins = data.coins ?? 0;
const streak = data.streak ?? 0;
const title = data.title || '‚Äì';

const hearts = Object.values(data.inventory ?? {}).reduce((a, b) => a + b, 0);
const rares = (data.inventory?.Rare ?? 0) + (data.inventory?.Epic ?? 0) + (data.inventory?.Legendary ?? 0);

const equipped = Object.entries(shopItems).map(([name, item]) => {
    const lvl = upgrades[name] ?? 0;
    return `‚Ä¢ **${name}**: Lv.${lvl}/${item.maxLevel}`;
}).join('\n');

const stats = [
    `‚Ä¢ ‚ù§Ô∏è Herzen gesamt: ${hearts}`,
    `‚Ä¢ üíé Seltene Herzen: ${rares}`,
    `‚Ä¢ üî• Streak: ${streak}`,
    `‚Ä¢ üè∑Ô∏è Titel: ${title}`
].join('\n');

return new EmbedBuilder()
    .setTitle('üéí Dein Inventar')
    .setColor(0xff66cc)
    .setAuthor({
    name: user.username,
    iconURL: user.displayAvatarURL({ dynamic: true })
    })
    .setThumbnail(user.displayAvatarURL({ size: 256, dynamic: true }))
    .setDescription(
    `**üí∞ Coins:** ${coins}\n**üè∑Ô∏è Titel:** ${title}\n**üî• Streak:** ${streak}\n\n` +
    `__üß∞ Ausr√ºstung__\n${equipped}\n\n__üìä Stats__\n${stats}`
    )
    .setFooter({ text: `.${user.username}` });
}

function buildShopButtons(data) {
const rows = [];
let row = new ActionRowBuilder();

for (const [name, item] of Object.entries(shopItems)) {
    const level = data.upgradeLevels?.[name] ?? 0;
    if (level >= item.maxLevel) continue;

    const button = new ButtonBuilder()
    .setCustomId(`buy_${name}`)
    .setLabel(`Kaufen: ${name}`)
    .setStyle(ButtonStyle.Primary);

    row.addComponents(button);
    if (row.components.length === 5) {
    rows.push(row);
    row = new ActionRowBuilder();
    }
}

if (row.components.length > 0) rows.push(row);
return rows;
}

module.exports = {
buildShopEmbed,
buildInventoryEmbed,
buildShopButtons
};